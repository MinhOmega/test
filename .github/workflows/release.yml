name: Release

on:
  schedule:
    # Run at 12AM GMT+7 (5PM UTC) - only for dev branch
    - cron: "*/5 * * * *"
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to release from"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - production
  push:
    branches:
      - staging
      - production

jobs:
  release:
    if: ${{ (!contains(github.event.head_commit.message, '[skip ci]') && (github.ref_name == 'dev' || github.event_name != 'schedule')) || github.event_name == 'workflow_dispatch' }}
    name: Release on ${{ github.event.inputs.branch || github.ref_name }}
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: read

    env:
      NODE_VERSION: 20
      RELEASE_BRANCH: ${{ github.event.inputs.branch || github.ref_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.RELEASE_BRANCH }}

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js with corepack
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install pnpm
        run: |
          corepack enable
          npm install -g pnpm@9.12.3

      - name: Verify pnpm version
        run: pnpm --version

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

      - name: Set branch-specific variables
        run: |
          BRANCH="${{ env.RELEASE_BRANCH }}"
          case "$BRANCH" in
            dev)
              echo "PRERELEASE_FLAG=--prerelease" >> "$GITHUB_ENV"
              echo "RELEASE_TITLE_PREFIX=[DEV] " >> "$GITHUB_ENV"
              echo "VERSION_PREFIX=beta" >> "$GITHUB_ENV"
              ;;
            staging)
              echo "PRERELEASE_FLAG=--prerelease" >> "$GITHUB_ENV"
              echo "RELEASE_TITLE_PREFIX=[STAGING] " >> "$GITHUB_ENV"
              echo "VERSION_PREFIX=rc" >> "$GITHUB_ENV"
              ;;
            production)
              echo "PRERELEASE_FLAG=" >> "$GITHUB_ENV"
              echo "RELEASE_TITLE_PREFIX=Release " >> "$GITHUB_ENV"
              echo "VERSION_PREFIX=" >> "$GITHUB_ENV"
              ;;
            *)
              echo "Branch $BRANCH is not supported for release." && exit 1
              ;;
          esac

      - name: Get current version from package.json
        id: package_version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> "$GITHUB_ENV"

      - name: Get latest tag for branch
        id: get_latest_tag
        run: |
          BRANCH="${{ env.RELEASE_BRANCH }}"
          PACKAGE_VERSION=$PACKAGE_VERSION

          # Get the base version without any pre-release identifiers
          BASE_VERSION=$PACKAGE_VERSION

          # Try to get the latest tag for this branch pattern
          if [[ "$BRANCH" == "dev" ]]; then
            # Find latest beta tag with this base version
            LATEST_TAG=$(git tag -l "v${BASE_VERSION}-beta.*" | sort -V | tail -n 1 || echo "")
            if [[ -z "$LATEST_TAG" ]]; then
              # No beta tag exists for this version, create first one
              NEW_TAG="v${BASE_VERSION}-beta.0"
            else
              # Extract the beta number and increment it
              BETA_NUM=$(echo $LATEST_TAG | sed -E 's/.*beta\.([0-9]+)$/\1/')
              BETA_NUM=$((BETA_NUM + 1))
              NEW_TAG="v${BASE_VERSION}-beta.${BETA_NUM}"
            fi
          elif [[ "$BRANCH" == "staging" ]]; then
            # Find latest rc tag with this base version
            LATEST_TAG=$(git tag -l "v${BASE_VERSION}-rc.*" | sort -V | tail -n 1 || echo "")
            if [[ -z "$LATEST_TAG" ]]; then
              # No rc tag exists for this version, create first one
              NEW_TAG="v${BASE_VERSION}-rc.0"
            else
              # Extract the rc number and increment it
              RC_NUM=$(echo $LATEST_TAG | sed -E 's/.*rc\.([0-9]+)$/\1/')
              RC_NUM=$((RC_NUM + 1))
              NEW_TAG="v${BASE_VERSION}-rc.${RC_NUM}"
            fi
          elif [[ "$BRANCH" == "production" ]]; then
            # Check if the exact version tag already exists
            EXACT_VERSION_TAG=$(git tag -l "v${BASE_VERSION}" | head -n 1 || echo "")
            if [[ -n "$EXACT_VERSION_TAG" ]]; then
              # Version tag already exists, we need to increment the patch version
              MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
              MINOR=$(echo $BASE_VERSION | cut -d. -f2)
              PATCH=$(echo $BASE_VERSION | cut -d. -f3)
              PATCH=$((PATCH + 1))
              NEW_TAG="v$MAJOR.$MINOR.$PATCH"
              echo "Warning: Version v${BASE_VERSION} already exists as a tag. Incrementing to $NEW_TAG"
            else
              # Use the exact version from package.json
              NEW_TAG="v${BASE_VERSION}"
            fi
          fi

          echo "NEW_TAG=$NEW_TAG" >> "$GITHUB_ENV"
          echo "Generated new tag: $NEW_TAG"

      - name: Create and push git tag
        run: |
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Generate and create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ env.RELEASE_BRANCH }}" == "production" ]]; then
            # Find the previous release tag
            PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -v "beta\|rc" | head -n 2 | tail -n 1 || echo "")
            if [[ -z "$PREVIOUS_TAG" ]]; then
              # If no previous tag, get the first commit
              PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            fi
            
            # Generate full changelog for CHANGELOG.md file
            echo "Generating full changelog for CHANGELOG.md"
            node scripts/changelog-generator.js "$PREVIOUS_TAG" "$NEW_TAG" "CHANGELOG.md"
            
            # Commit the updated CHANGELOG.md
            if git diff --quiet -- CHANGELOG.md; then
              echo "No changes to CHANGELOG.md"
            else
              echo "Committing updated CHANGELOG.md"
              git add CHANGELOG.md
              git commit -m "docs: update CHANGELOG.md for $NEW_TAG [skip ci]"
              git push origin ${{ env.RELEASE_BRANCH }}
            fi
            
            # Generate release-specific changelog for release notes
            echo "Generating release notes for GitHub release"
            RELEASE_NOTES_FILE="RELEASE_NOTES_$NEW_TAG.md"
            node scripts/changelog-generator.js "$PREVIOUS_TAG" "$NEW_TAG" "$RELEASE_NOTES_FILE" "release-notes"
            
            # Create release with release-specific changelog
            gh release create "$NEW_TAG" --notes-file "$RELEASE_NOTES_FILE" $PRERELEASE_FLAG --title "$RELEASE_TITLE_PREFIX$NEW_TAG"
            
            # Clean up temporary file
            rm -f "$RELEASE_NOTES_FILE"
          else
            # For non-production branches, just create the release with auto-generated notes
            gh release create "$NEW_TAG" --generate-notes $PRERELEASE_FLAG --title "$RELEASE_TITLE_PREFIX$NEW_TAG"
          fi

      - name: Start next development cycle on dev
        if: env.RELEASE_BRANCH == 'production'
        run: |
          git fetch origin
          git checkout -b dev origin/dev

          # Get the current version from package.json
          DEV_PACKAGE_VERSION=$(node -p "require('./package.json').version")

          # Extract version components and increment patch version
          MAJOR=$(echo $DEV_PACKAGE_VERSION | cut -d. -f1)
          MINOR=$(echo $DEV_PACKAGE_VERSION | cut -d. -f2)
          PATCH=$(echo $DEV_PACKAGE_VERSION | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEW_DEV_VERSION="$MAJOR.$MINOR.$PATCH"

          # Update package.json with the new version
          npx json -I -f package.json -e "this.version='$NEW_DEV_VERSION'"

          # Create a new beta tag for the new version
          NEXT_BETA_TAG="v${NEW_DEV_VERSION}-beta.0"

          # Commit the changes and push
          git add package.json
          git commit -m "chore: start next development cycle v${NEW_DEV_VERSION} [skip ci]"
          git push origin dev

          # Create and push the new tag
          git tag $NEXT_BETA_TAG
          git push origin $NEXT_BETA_TAG

          echo "Created new development version: $NEW_DEV_VERSION with tag $NEXT_BETA_TAG"
