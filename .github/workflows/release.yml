name: Release

on:
  push:
    branches:
      - dev
      - staging
      - main

jobs:
  release:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    name: Release on ${{ github.ref_name }}
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: read

    env:
      NODE_VERSION: 20
      PNPM_VERSION: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Verify pnpm version
        run: pnpm --version

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

      - name: Set branch-specific variables
        run: |
          BRANCH="${{ github.ref_name }}"
          case "$BRANCH" in
            dev)
              echo "PRERELEASE_FLAG=--prerelease" >> "$GITHUB_ENV"
              echo "RELEASE_TITLE_PREFIX=[DEV] " >> "$GITHUB_ENV"
              echo "VERSION_PREFIX=beta" >> "$GITHUB_ENV"
              ;;
            staging)
              echo "PRERELEASE_FLAG=--prerelease" >> "$GITHUB_ENV"
              echo "RELEASE_TITLE_PREFIX=[STAGING] " >> "$GITHUB_ENV"
              echo "VERSION_PREFIX=rc" >> "$GITHUB_ENV"
              ;;
            main)
              echo "PRERELEASE_FLAG=" >> "$GITHUB_ENV"
              echo "RELEASE_TITLE_PREFIX=Release " >> "$GITHUB_ENV"
              echo "VERSION_PREFIX=" >> "$GITHUB_ENV"
              ;;
            *)
              echo "Branch $BRANCH is not supported for release." && exit 1
              ;;
          esac

      - name: Get current version from package.json
        id: package_version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> "$GITHUB_ENV"

      - name: Get latest tag for branch
        id: get_latest_tag
        run: |
          BRANCH="${{ github.ref_name }}"
          # Try to get the latest tag for this branch pattern
          if [[ "$BRANCH" == "dev" ]]; then
            LATEST_TAG=$(git tag -l "v*-beta.*" | sort -V | tail -n 1 || echo "")
          elif [[ "$BRANCH" == "staging" ]]; then
            LATEST_TAG=$(git tag -l "v*-rc.*" | sort -V | tail -n 1 || echo "")
          elif [[ "$BRANCH" == "main" ]]; then
            LATEST_TAG=$(git tag -l "v*" | grep -v "-" | sort -V | tail -n 1 || echo "")
          fi

          # If no tag exists for this branch pattern, use the package.json version as base
          if [[ -z "$LATEST_TAG" ]]; then
            if [[ "$BRANCH" == "dev" ]]; then
              NEW_TAG="v$PACKAGE_VERSION-beta.1"
            elif [[ "$BRANCH" == "staging" ]]; then
              NEW_TAG="v$PACKAGE_VERSION-rc.1"
            elif [[ "$BRANCH" == "main" ]]; then
              NEW_TAG="v$PACKAGE_VERSION"
            fi
          else
            # Increment the existing tag
            if [[ "$BRANCH" == "dev" ]]; then
              # Extract the beta number and increment it
              BETA_NUM=$(echo $LATEST_TAG | sed -E 's/.*beta\.([0-9]+)$/\1/')
              BETA_NUM=$((BETA_NUM + 1))
              BASE_VERSION=$(echo $LATEST_TAG | sed -E 's/(v[0-9]+\.[0-9]+\.[0-9]+)-beta\.[0-9]+/\1/')
              NEW_TAG="${BASE_VERSION}-beta.${BETA_NUM}"
            elif [[ "$BRANCH" == "staging" ]]; then
              # Extract the rc number and increment it
              RC_NUM=$(echo $LATEST_TAG | sed -E 's/.*rc\.([0-9]+)$/\1/')
              RC_NUM=$((RC_NUM + 1))
              BASE_VERSION=$(echo $LATEST_TAG | sed -E 's/(v[0-9]+\.[0-9]+\.[0-9]+)-rc\.[0-9]+/\1/')
              NEW_TAG="${BASE_VERSION}-rc.${RC_NUM}"
            elif [[ "$BRANCH" == "main" ]]; then
              # Increment the patch version for main
              VERSION=$(echo $LATEST_TAG | sed 's/v//')
              MAJOR=$(echo $VERSION | cut -d. -f1)
              MINOR=$(echo $VERSION | cut -d. -f2)
              PATCH=$(echo $VERSION | cut -d. -f3)
              PATCH=$((PATCH + 1))
              NEW_TAG="v$MAJOR.$MINOR.$PATCH"
            fi
          fi

          echo "NEW_TAG=$NEW_TAG" >> "$GITHUB_ENV"
          echo "Generated new tag: $NEW_TAG"

      - name: Create and push git tag
        run: |
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Generate and create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "$NEW_TAG" --generate-notes $PRERELEASE_FLAG --title "$RELEASE_TITLE_PREFIX$NEW_TAG"

      - name: Start next development cycle on dev
        if: github.ref_name == 'main'
        run: |
          git fetch origin
          git checkout -b dev origin/dev

          # Extract version components from the new tag
          VERSION=$(echo $NEW_TAG | sed 's/v//')
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          # Create next beta version based on the new release
          NEXT_BETA_TAG="v$MAJOR.$MINOR.$PATCH-beta.1"

          git tag $NEXT_BETA_TAG
          git push origin $NEXT_BETA_TAG

          echo "Created new development tag: $NEXT_BETA_TAG"
